// import * as THREE from './three/module.js';
import {
	getUserInfo,
	getUniversesByUser,
	getUniverseIcons,
	getAllUniverseInfo,
} from "../../modules/utilities.js"

const main = document.getElementById("main");
const navbar = document.getElementById("navbar");
const entries = document.getElementById("entries");
const newGame = document.getElementById("newGame");
const myGames = document.getElementById("myGames");

for (const button of navbar.querySelectorAll("button")) {
	button.addEventListener("click", function () {
		for (const active of navbar.getElementsByClassName("active")) {
			active.classList.remove("active")
		};

		button.classList.add("active");
		window.location.hash = button.id;
	});
};

newGame.addEventListener("click", function () {
	renderEntries(async function (cursor) {
		const details = await getAllUniverseInfoByUser({
			userId: 998796,
			cursor,
		});

		const { universes, icons } = details;
		const data = universes?.data;

		const info = (await getAllUniverseInfo({
			universeIds: data.map(universe => universe?.id),
		}))?.data;

		universes.data = data.filter(function (universe) {
			const universeInfo = info.find(a => a.id == universe.id);
			return universeInfo.copyingAllowed;
		});

		return {
			universes,
			icons,
		};
	});
});

myGames.addEventListener("click", () => {
	renderEntries(cursor => getAllUniverseInfoByUser({ cursor }));
});

function createEntry() {
	const entry = document.createElement("div");
	entry.classList.add("entry");

	const thumbnail = document.createElement("img");
	thumbnail.classList.add("thumbnail");

	const title = document.createElement("b");
	title.classList.add("title");

	entry.append(thumbnail, title);

	return {
		entry,
		thumbnail,
		title,
	};
};

async function getAllUniverseInfoByUser(settings) { // Templates = 998796
	const universes = (await getUniversesByUser(settings));
	const data = universes?.data;

	if (data == null) {
		alert("Could not get the specified ROBLOX experiences.");
		getUserInfo(true);

		return;
	};

	const icons = (await getUniverseIcons({
		universeIds: data.map(universe => universe?.id),
		returnPolicy: settings.userId != null ? "PlaceHolder" : "AutoGenerated"
	}))?.data;

	if (icons == null) {
		alert("Could not get your ROBLOX experience(s) icons.");
		icons = {};
	};

	return {
		universes,
		icons,
	};
};

async function renderEntries(callback) {
	const loading = document.createElement("div");
	loading.classList.add("loading");

	for (let i = 1; i <= 3; i++) {
		const cube = document.createElement("div");
		cube.classList.add("loading-cube");

		loading.appendChild(cube);
	};

	entries.textContent = "";
	main.appendChild(loading);

	async function addEntries(details) {
		if (details == null) {
			return;
		};

		const { universes, icons } = details;
	
		for (const universe of universes?.data) {
			const { entry, thumbnail, title } = createEntry();
			const icon = icons?.find(icon => icon?.targetId === universe?.id);
			
			thumbnail.src = icon?.imageUrl;
			title.textContent = universe?.name;
	
			entries.appendChild(entry);
		};
	};

	let debounce = false;
	let details = await callback(); 

	main.removeChild(loading);
	entries.textContent = "";
	addEntries(details);
	
	async function renderNextPage() {
		if (debounce) {
			return;
		};
	
		debounce = true;
		const nextPageCursor = details?.universes?.nextPageCursor;

		if (nextPageCursor != null) {
			details = await callback(nextPageCursor);

			addEntries(details);
			debounce = false;
		};
	}

	entries.onscroll = function () {
		const { scrollTop, scrollHeight, clientHeight } = this;

		if (scrollTop + clientHeight >= clientHeight - 500) {
			renderNextPage();
		};
	};
};

(async function () {
	const button = document.getElementById(window.location.hash.substring(1)) ?? newGame;
	button.click();
})();
